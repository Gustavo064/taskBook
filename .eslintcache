[{"/home/gustavo/Documentos/taskbox/src/stories/Page.stories.js":"1","/home/gustavo/Documentos/taskbox/src/stories/Button.js":"2","/home/gustavo/Documentos/taskbox/src/App.js":"3","/home/gustavo/Documentos/taskbox/src/components/Task.stories.js":"4","/home/gustavo/Documentos/taskbox/src/index.js":"5","/home/gustavo/Documentos/taskbox/src/reportWebVitals.js":"6","/home/gustavo/Documentos/taskbox/src/components/Task.js":"7","/home/gustavo/Documentos/taskbox/src/components/TaskList.stories.js":"8","/home/gustavo/Documentos/taskbox/src/components/TaskList.js":"9","/home/gustavo/Documentos/taskbox/src/lib/redux.js":"10","/home/gustavo/Documentos/taskbox/src/components/InboxScreen.stories.js":"11","/home/gustavo/Documentos/taskbox/src/components/InboxScreen.js":"12"},{"size":424,"mtime":1611575008726,"results":"13","hashOfConfig":"14"},{"size":1101,"mtime":1611575008726,"results":"15","hashOfConfig":"14"},{"size":331,"mtime":1606252250000,"results":"16","hashOfConfig":"14"},{"size":1987,"mtime":1611758542855,"results":"17","hashOfConfig":"14"},{"size":500,"mtime":1606252250000,"results":"18","hashOfConfig":"14"},{"size":362,"mtime":1606252250000,"results":"19","hashOfConfig":"14"},{"size":1433,"mtime":1611758565943,"results":"20","hashOfConfig":"14"},{"size":1587,"mtime":1606252250000,"results":"21","hashOfConfig":"14"},{"size":1929,"mtime":1606252250000,"results":"22","hashOfConfig":"14"},{"size":1682,"mtime":1606252250000,"results":"23","hashOfConfig":"14"},{"size":808,"mtime":1606252250000,"results":"24","hashOfConfig":"14"},{"size":904,"mtime":1606252250000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"fqenaw",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/home/gustavo/Documentos/taskbox/src/stories/Page.stories.js",["58"],"/home/gustavo/Documentos/taskbox/src/stories/Button.js",[],"/home/gustavo/Documentos/taskbox/src/App.js",[],"/home/gustavo/Documentos/taskbox/src/components/Task.stories.js",["59","60","61"],"// src/components/Task.stories.js\n\nimport React from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs, object } from '@storybook/addon-knobs';\nimport Task from './Task';\n\n\nexport default {\n  component: Task,\n  title: 'Task',\n  decorators: [withKnobs],\n  excludeStories: /.*Data$/,\n   // Parameters used in Story at component level.\n  // Learn more about parameters in https://storybook.js.org/docs/react/writing-stories/parameters\n  parameters: { assets: ['designs/items.png'] }\n  \n};\n\nconst Template = (args) => <Task {...args} />;\nconst label = \"id:1\"\nconst title= \"title:`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!\"\nconst defaultValue = {\n  backgroundColor: 'red',\n};\nconst groupId = 'GROUP-ID1';\n\n\nexport const Default = Template.bind({});\nDefault.args = {\n  task: {\n    id: \"1\",\n    title: 'Test Task',\n    state: 'TASK_INBOX',\n    updatedAt: new Date(2018, 0, 1, 9, 0),\n  },\n  \n};\n\n\nexport const Pinned = Template.bind({});\nPinned.args = {\n  task: {\n    ...Default.args.task,\n    state: 'TASK_PINNED',\n  },\n};\n\nexport const Archived = Template.bind({});\nArchived.args = {\n  task: {\n    ...Default.args.task,\n    state: 'TASK_ARCHIVED',\n  },\n};\nconst longTitleString = `This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`;\n\n//  export const LongTitle = Template.bind({});\n//  LongTitle.args = {\n//    task: {\n//      ...Default.args.task,\n//      title: longTitleString,\n     \n//    } };\n\n\nexport const  LongTitle = () => {\n  return <Task task={ object('task',title, defaultValue, groupId, longTitleString)} />;\n  \n  \n};","/home/gustavo/Documentos/taskbox/src/index.js",[],["62","63"],"/home/gustavo/Documentos/taskbox/src/reportWebVitals.js",[],"/home/gustavo/Documentos/taskbox/src/components/Task.js",["64"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Task({ task: { id, title, state,longTitleString }, onArchiveTask, onPinTask }) {\n  return (\n    <div className={`list-item ${state}`}>\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          defaultChecked={state === 'TASK_ARCHIVED'}\n          disabled={true}\n          name=\"checked\"\n        />\n        <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n      </label>\n      <div className=\"title\">\n  \n        <input type=\"text\" value={title} readOnly={true} placeholder=\"This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!\" style={{ textOverflow: 'ellipsis' }} />\n\n        \n      </div>\n\n      <div className=\"actions\" onClick={event => event.stopPropagation()}>\n        {state !== 'TASK_ARCHIVED' && (\n          <a onClick={() => onPinTask(id)}>\n            <span className={`icon-star`} />\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\nTask.propTypes = {\n  task: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    state: PropTypes.string.isRequired,\n  }),\n  onArchiveTask: PropTypes.func,\n  onPinTask: PropTypes.func,\n};\n",["65","66"],"/home/gustavo/Documentos/taskbox/src/components/TaskList.stories.js",["67"],"import React from \"react\";\n\nimport { PureTaskList } from \"./TaskList\";\nimport * as TaskStories from \"./Task.stories\";\n\nexport default {\n  component: PureTaskList,\n  title: \"TaskList\",\n  decorators: [(story) => <div style={{ padding: \"3rem\" }}>{story()}</div>],\n  parameters: { assets: [\"designs/list-1.png\", \"designs/list-2.png\"] },\n};\nconst Template = (args) => <PureTaskList {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  // Shaping the stories through args composition.\n  // The data was inherited the Default story in task.stories.js.\n  tasks: [\n    { ...TaskStories.Default.args.task, id: \"1\", title: \"Task 1\" },\n    { ...TaskStories.Default.args.task, id: \"2\", title: \"Task 2\" },\n    { ...TaskStories.Default.args.task, id: \"3\", title: \"Task 3\" },\n    { ...TaskStories.Default.args.task, id: \"4\", title: \"Task 4\" },\n    { ...TaskStories.Default.args.task, id: \"5\", title: \"Task 5\" },\n    { ...TaskStories.Default.args.task, id: \"6\", title: \"Task 6\" },\n  ],\n};\n\nexport const WithPinnedTasks = Template.bind({});\nWithPinnedTasks.args = {\n  // Shaping the stories through args composition.\n  // Inherited data coming from the Default story.\n  tasks: [\n    ...Default.args.tasks.slice(0, 5),\n    { id: \"6\", title: \"Task 6 (pinned)\", state: \"TASK_PINNED\" },\n  ],\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  tasks: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  // Shaping the stories through args composition.\n  // Inherited data coming from the Loading story.\n  ...Loading.args,\n  loading: false,\n};\n",["68","69"],"/home/gustavo/Documentos/taskbox/src/components/TaskList.js",[],"/home/gustavo/Documentos/taskbox/src/lib/redux.js",[],"/home/gustavo/Documentos/taskbox/src/components/InboxScreen.stories.js",["70"],"import React from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { Provider } from 'react-redux';\n\nimport { PureInboxScreen } from './InboxScreen';\nimport * as TaskListStories from './TaskList.stories';\n\n\nexport default {\n  component: PureInboxScreen,\n  title: 'InboxScreen',\n  parameters: { assets: ['designs/app.png'] },\n  decorators: [(story) => <Provider store={store}>{story()}</Provider>],\n};\n\n// A super-simple mock of a redux store\nconst store = {\n  getState: () => {\n    return {\n      tasks:TaskListStories.Default.args.tasks,\n    };\n  },\n  subscribe: () => 0,\n  dispatch: action('dispatch'),\n};\n\nconst Template = (args) => <PureInboxScreen {...args} />;\n\nexport const Default = Template.bind({});\n\nexport const Error = Template.bind({});\nError.args = {\n  error: \"Something\",\n};","/home/gustavo/Documentos/taskbox/src/components/InboxScreen.js",[],["71","72"],{"ruleId":"73","severity":1,"message":"74","line":6,"column":1,"nodeType":"75","endLine":9,"endColumn":3},{"ruleId":"76","severity":1,"message":"77","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":9,"column":1,"nodeType":"75","endLine":18,"endColumn":3},{"ruleId":"76","severity":1,"message":"80","line":21,"column":7,"nodeType":"78","messageId":"79","endLine":21,"endColumn":12},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":25,"column":11,"nodeType":"87","endLine":25,"endColumn":44},{"ruleId":"81","replacedBy":"88"},{"ruleId":"83","replacedBy":"89"},{"ruleId":"73","severity":1,"message":"74","line":6,"column":1,"nodeType":"75","endLine":11,"endColumn":3},{"ruleId":"81","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"73","severity":1,"message":"74","line":9,"column":1,"nodeType":"75","endLine":14,"endColumn":3},{"ruleId":"81","replacedBy":"92"},{"ruleId":"83","replacedBy":"93"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'action' is defined but never used.","Identifier","unusedVar","'label' is assigned a value but never used.","no-native-reassign",["94"],"no-negated-in-lhs",["95"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["94"],["95"],["94"],["95"],["94"],["95"],"no-global-assign","no-unsafe-negation"]